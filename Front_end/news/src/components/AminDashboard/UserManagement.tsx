import React, { useEffect, useState } from "react";
import { Table, Button, Modal, Form, Input, Select, DatePicker, message } from "antd";
import axios from "axios";
import moment from "moment";

const UserManagement = () => {
    const [users, setUsers] = useState<any[]>([]);
    const [loading, setLoading] = useState(false);

    // Modal th√™m ng∆∞·ªùi d√πng
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [addForm] = Form.useForm();

    // L·∫•y danh s√°ch user
    const fetchUsers = async () => {
        setLoading(true);
        try {
            const res = await axios.get("http://localhost:8081/api/auth/users");
            setUsers(res.data);
        } catch (error) {
            message.error("L·∫•y danh s√°ch ng∆∞·ªùi d√πng th·∫•t b·∫°i!");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    const openAddModal = () => {
        setIsAddModalOpen(true);
    };

    const closeAddModal = () => {
        setIsAddModalOpen(false);
        addForm.resetFields();
    };

    const columns = [
        { title: "ID", dataIndex: "id", key: "id" },
        { title: "T√™n ƒëƒÉng nh·∫≠p", dataIndex: "username", key: "username" },
        { title: "Email", dataIndex: "email", key: "email" },
        { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone", key: "phone" },
        {
            title: "Lo·∫°i t√†i kho·∫£n",
            dataIndex: "accountType",
            key: "accountType",
            render: (value: number) => {
                switch (value) {
                    case 0: return "Admin üëë";
                    case 1: return "Th∆∞·ªùng";
                    case 2: return "Premium ‚≠ê";
                    default: return "Ch∆∞a x√°c ƒë·ªãnh";
                }
            }
        },
        {
            title: "Ng√†y sinh",
            dataIndex: "birthday",
            key: "birthday",
            render: (date: string) => date ? moment(date).format("DD/MM/YYYY") : "-"
        }
    ];

    return (
        <>
            <h2>Qu·∫£n l√Ω ng∆∞·ªùi d√πng üëë</h2>
            <Button type="primary" onClick={openAddModal} style={{ marginBottom: 16 }}>
                Th√™m ng∆∞·ªùi d√πng
            </Button>

            <Table
                dataSource={users}
                columns={columns}
                rowKey="id"
                loading={loading}
                pagination={{ pageSize: 5 }}
            />

            <Modal
                title="Th√™m ng∆∞·ªùi d√πng m·ªõi"
                visible={isAddModalOpen}
                onCancel={closeAddModal}
                footer={null}
            >
                <Form
                    form={addForm}
                    layout="vertical"
                    onFinish={async (values) => {
                        try {
                            await axios.post("http://localhost:8081/api/auth/register", {
                                ...values,
                                birthday: values.birthday ? values.birthday.format("YYYY-MM-DD") : null
                            });

                            message.success("Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!");
                            closeAddModal();
                            fetchUsers();

                        } catch (error: any) {
                            const data = error.response?.data;
                            const errorMsg = typeof data === "string" ? data : (data?.message || JSON.stringify(data) || "ƒê√£ x·∫£y ra l·ªói!");
                            message.error(errorMsg);
                        }
                    }}
                >
                    <Form.Item
                        name="username"
                        label="T√™n ƒëƒÉng nh·∫≠p"
                        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!" }]}
                    >
                        <Input />
                    </Form.Item>

                    <Form.Item
                        name="password"
                        label="M·∫≠t kh·∫©u"
                        rules={[
                            { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" },
                            { min: 8, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!" },
                            {
                                pattern: /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*?&]{6,}$/,
                                message: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i v√† 1 s·ªë!"
                            }
                        ]}
                    >
                        <Input.Password />
                    </Form.Item>


                    <Form.Item
                        name="email"
                        label="Email"
                        rules={[
                            { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
                            { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
                        ]}
                    >
                        <Input />
                    </Form.Item>

                    <Form.Item
                        name="phone"
                        label="S·ªë ƒëi·ªán tho·∫°i"
                    >
                        <Input />
                    </Form.Item>

                    <Form.Item
                        name="accountType"
                        label="Lo·∫°i t√†i kho·∫£n"
                        rules={[{ required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i t√†i kho·∫£n!" }]}
                        initialValue={1}
                    >
                        <Select>
                            <Select.Option value={0}>Admin</Select.Option>
                            <Select.Option value={1}>Th∆∞·ªùng</Select.Option>
                            <Select.Option value={2}>Premium</Select.Option>
                        </Select>
                    </Form.Item>

                    <Form.Item
                        name="birthday"
                        label="Ng√†y sinh"
                    >
                        <DatePicker style={{ width: "100%" }} />
                    </Form.Item>

                    <Form.Item>
                        <Button type="primary" htmlType="submit" block>
                            Th√™m ng∆∞·ªùi d√πng
                        </Button>
                    </Form.Item>
                </Form>
            </Modal>
        </>
    );
};

export default UserManagement;
